#include <stdio.h>
#include <stdlib.h>

// Node structure for singly linked list
typedef struct Node {
    int data;
    struct Node *next;
} Node;

// Stack structure
typedef struct {
    Node *top;
} Stack;

// Queue structure
typedef struct {
    Node *front;
    Node *rear;
} Queue;

// Function to create a new node
Node *createNode(int data) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    if (newNode) {
        newNode->data = data;
        newNode->next = NULL;
    }
    return newNode;
}

// Function to initialize stack
void initializeStack(Stack *stack) {
    stack->top = NULL;
}

// Function to push an element onto the stack
void push(Stack *stack, int data) {
    Node *newNode = createNode(data);
    if (!newNode) {
        printf("Memory allocation failed\n");
        return;
    }

    newNode->next = stack->top;
    stack->top = newNode;
}

// Function to pop an element from the stack
int pop(Stack *stack) {
    if (stack->top == NULL) {
        printf("Stack is empty\n");
        return -1;
    }

    Node *temp = stack->top;
    int data = temp->data;
    stack->top = temp->next;
    free(temp);
    return data;
}

// Function to initialize queue
void initializeQueue(Queue *queue) {
    queue->front = queue->rear = NULL;
}

// Function to enqueue an element into the queue
void enqueue(Queue *queue, int data) {
    Node *newNode = createNode(data);
    if (!newNode) {
        printf("Memory allocation failed\n");
        return;
    }

    if (queue->rear == NULL) {
        queue->front = queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
}

// Function to dequeue an element from the queue
int dequeue(Queue *queue) {
    if (queue->front == NULL) {
        printf("Queue is empty\n");
        return -1;
    }

    Node *temp = queue->front;
    int data = temp->data;
    queue->front = temp->next;
    if (queue->front == NULL) {
        queue->rear = NULL;
    }
    free(temp);
    return data;
}

// Function to display stack elements
void displayStack(Stack *stack) {
    Node *temp = stack->top;
    printf("Stack: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Function to display queue elements
void displayQueue(Queue *queue) {
    Node *temp = queue->front;
    printf("Queue: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    Stack stack;
    Queue queue;

    initializeStack(&stack);
    initializeQueue(&queue);

    int choice, data;

    do {
        printf("\n1. Push element onto stack\n");
        printf("2. Pop element from stack\n");
        printf("3. Enqueue element into queue\n");
        printf("4. Dequeue element from queue\n");
        printf("5. Display stack\n");
        printf("6. Display queue\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter element to push onto stack: ");
                scanf("%d", &data);
                push(&stack, data);
                break;
            case 2:
                data = pop(&stack);
                if (data != -1) {
                    printf("Popped element: %d\n", data);
                }
                break;
            case 3:
                printf("Enter element to enqueue into queue: ");
                scanf("%d", &data);
                enqueue(&queue, data);
                break;
            case 4:
                data = dequeue(&queue);
                if (data != -1) {
                    printf("Dequeued element: %d\n", data);
                }
                break;
            case 5:
                displayStack(&stack);
                break;
            case 6:
                displayQueue(&queue);
                break;
            case 0:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice\n");
        }
    } while (choice != 0);

    return 0;
}
